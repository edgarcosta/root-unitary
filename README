This package implements a search strategy for root-unitary polynomials 
(polynomials with all roots on the unit circle) described in:

K.S. Kedlaya, Search techniques for root-unitary polynomials, in 
    Computational Arithmetic Geometry, Contemporary Mathematics 463, 
    American Mathematical Society, 2008, 71-82;

plus some additional improvements described in:

K.S. Kedlaya and A.V. Sutherland, A census of zeta functions of
    quartic K3 surfaces over F_2, LMS Journal of Computing 19
    special issue A (2016), 1-11.

There are currently six source files:

-- prescribed_roots.pyx: Sage/Cython wrapper
-- all_roots_in_interval.c: C code, using FLINT library, to test whether 
    a polynomial has its roots in a given interval (Sturm's theorem)
-- all_roots_in_interval.h: associated header file
-- power_sums.c: C code, using FLINT library, to enumerate the tree based on
    Sturm's theorem and additional bounds computed from power sums
-- power_sums.h: associated header file
-- aux.sage: some auxiliary Sage functions

From a Sage prompt, type
  sage: load("prescribed_roots.pyx")
and everything should compile automatically.

Theer are also some test scripts. For directories, see their own README files.

-- search-test.sage: Run computations from the 2008 paper
-- table-maker.sage: Build tables of Weil polynomials for the LMFDB
-- test-roots-from-file.sage: Test whether lines in a file define Weil polynomials
-- av-scripts/: Test suite for abelian varieties
-- k3-scripts/: Build tables associated to K3 surfaces
-- k3-quartic-f2: Scripts and data files associated to smooth quartic K3 surfaces over
   F_2. See "A census of zeta functions..." for more information.

POSSIBLE TODO LIST: 
-- Improve parallel computation in the current Cython model.
-- Port from Sage (based on Python) to Nemo (based on Julia).
-- Add some floating-point computations to isolate roots, thus reducing
    the dependence on Sturm's theorem. For instance, this is available in e-antic.
